App\Model\Entity\PipelineConfig:
	pipelineConfig1:
		__construct:
			- "boxes:\n    - { name: source, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: source-file } } }\n    - { name: out, type: file-out, portsIn: { output: { type: file, value: source-file } }, portsOut: {  } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\n    - { name: extras-out, type: files-out, portsIn: { output: { type: file[], value: extra-files } }, portsOut: {  } }\nvariables:\n    - { name: source-file, type: file, value: '' }\n    - { name: extra-files, type: 'file[]', value: $extra-file-names }\n"
			- @demoAdmin

	pipelineConfig2:
		__construct:
			- "boxes:\n    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: file[], value: source-files } } }\n    - { name: outs, type: files-out, portsIn: { output: { type: file[], value: source-files } }, portsOut: {  } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\n    - { name: extras-out, type: files-out, portsIn: { output: { type: file[], value: extra-files } }, portsOut: {  } }\nvariables:\n    - { name: source-files, type: file[], value: [] }\n    - { name: extra-files, type: 'file[]', value: $extra-file-names }\n"
			- @demoAdmin

	pipelineConfig3:
		__construct:
			- "--- \nboxes: \n  - \n    name: inputs\n    portsIn: {}\n    portsOut: \n      input: \n        type: file[]\n        value: input-files\n    type: files-in\n  - \n    name: merge\n    portsIn: \n      in1: \n        type: \"file[]\"\n        value: input-files\n      in2: \n        type: file[]\n        value: source-files\n    portsOut: \n      out: \n        type: file[]\n        value: merged-files\n    type: merge-files\n  - \n    name: run\n    portsIn: \n      args: \n        type: \"string[]\"\n        value: run-args\n      binary-file: \n        type: file\n        value: custom-judge\n      input-files: \n        type: \"file[]\"\n        value: merged-files\n      stdin: \n        type: file\n        value: \"\"\n    portsOut: \n      output-file: \n        type: file\n        value: \"\"\n      stdout: \n        type: file\n        value: actual-output\n    type: elf-exec\n  - \n    name: judge\n    portsIn: \n      actual-output: \n        type: file\n        value: actual-output\n      args: \n        type: \"string[]\"\n        value: judge-args\n      custom-judge: \n        type: file\n        value: \"\"\n      expected-output: \n        type: file\n        value: actual-output\n      judge-type: \n        type: string\n        value: judge-type\n    portsOut: {}\n    type: judge\n  - \n    name: source-files\n    portsIn: {}\n    portsOut: \n      input: \n        type: \"file[]\"\n        value: source-files\n    type: files-in\n  - \n    name: custom-judge\n    portsIn: {}\n    portsOut: \n      input: \n        type: file\n        value: custom-judge\n    type: file-in\nvariables: \n  - \n    name: run-args\n    type: \"string[]\"\n    value: $run-args\n  - \n    name: judge-type\n    type: string\n    value: \"recodex-judge-passthrough\"\n  - \n    name: actual-output\n    type: file\n    value: \"\"\n  - \n    name: input-files\n    type: file[]\n    value: $actual-inputs\n  - \n    name: source-files\n    type: \"file[]\"\n    value: []\n  - \n    name: merged-files\n    type: \"file[]\"\n    value: []\n  - \n    name: custom-judge\n    type: file\n    value: \"\"\n  - \n    name: judge-args\n    type: \"string[]\"\n    value: []\n"
			- @demoAdmin

	pipelineConfig4:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: binary-file } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: elf-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, binary-file: { type: file, value: binary-file } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: $actual-output }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: binary-file, type: file, value: a.out }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n"
			- @demoAdmin

	pipelineConfig5:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: binary-file } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: elf-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, binary-file: { type: file, value: binary-file } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: '' }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: binary-file, type: file, value: a.out }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n"
			- @demoAdmin

	pipelineConfig6:
		__construct:
			- "boxes:\n    - { name: output, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }\n    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: compile, type: fpc, portsIn: { args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\nvariables:\n    - { name: args, type: 'string[]', value: ['-O2', '-Sg', '-Ci', '-Cr', '-Ct'] }\n    - { name: binary-file, type: file, value: a.out }\n    - { name: source-files, type: 'file[]', value: '' }\n    - { name: extra-files, type: 'file[]', value: $extra-file-names }\n"
			- @demoAdmin

	pipelineConfig7:
		__construct:
			- "boxes:\n    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: compilation, type: g++, portsIn: { args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }\n    - { name: binary, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\nvariables:\n    - { name: args, type: 'string[]', value: ['-std=c++17', '-O3', '-lm', '-pthread'] }\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: extra-files, type: 'file[]', value: $extra-file-names }\n    - { name: binary-file, type: file, value: a.out }\n"
			- @demoAdmin

	pipelineConfig8:
		__construct:
			- "boxes:\n    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: compilation, type: gcc, portsIn: { args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }\n    - { name: binary, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\nvariables:\n    - { name: args, type: 'string[]', value: ['-std=gnu11', '-O3', '-lm'] }\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: binary-file, type: file, value: a.out }\n    - { name: extra-files, type: 'file[]', value: $extra-file-names }\n"
			- @demoAdmin

	pipelineConfig9:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: runner-fetch, type: fetch-file, portsIn: { remote: { type: remote-file, value: remote-runner } }, portsOut: { input: { type: file, value: runner-file } } }\n    - { name: classes, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: classes } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: java-runner, portsIn: { runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files: { type: 'file[]', value: classes }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\n    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }\nvariables:\n    - { name: remote-runner, type: remote-file, value: javarun.class }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: $actual-output }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: runner-file, type: file, value: javarun.class }\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: classes, type: 'file[]', value: '' }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n    - { name: jar-files, type: 'file[]', value: {  } }\n"
			- @demoAdmin

	pipelineConfig10:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: runner-fetch, type: fetch-file, portsIn: { remote: { type: remote-file, value: remote-runner } }, portsOut: { input: { type: file, value: runner-file } } }\n    - { name: classes, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: classes } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: java-runner, portsIn: { runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files: { type: 'file[]', value: classes }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\n    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }\nvariables:\n    - { name: remote-runner, type: remote-file, value: javarun.class }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: '' }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: runner-file, type: file, value: javarun.class }\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: classes, type: 'file[]', value: '' }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n    - { name: jar-files, type: 'file[]', value: {  } }\n"
			- @demoAdmin

	pipelineConfig11:
		__construct:
			- "boxes:\n    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: compilation, type: javac, portsIn: { args: { type: 'string[]', value: '' }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { class-files: { type: 'file[]', value: classes } } }\n    - { name: classes, type: files-out, portsIn: { output: { type: 'file[]', value: classes } }, portsOut: {  } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\n    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }\n    - { name: jars-passed, type: files-out, portsIn: { output: { type: 'file[]', value: jar-files } }, portsOut: {  } }\nvariables:\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: classes, type: 'file[]', value: {  } }\n    - { name: extra-files, type: 'file[]', value: $extra-file-names }\n    - { name: jar-files, type: 'file[]', value: {  } }\n"
			- @demoAdmin

	pipelineConfig12:
		__construct:
			- "boxes:\n    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: external-sources, type: fetch-files, portsIn: { remote: { type: 'remote-file[]', value: external-sources } }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: compilation, type: mcs, portsIn: { args: { type: 'string[]', value: '' }, main-class: { type: string, value: main-class }, external-sources: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { assembly: { type: file, value: assembly } } }\n    - { name: assembly, type: file-out, portsIn: { output: { type: file, value: assembly } }, portsOut: {  } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\nvariables:\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: external-sources, type: 'remote-file[]', value: [Reader.cs, Wrapper.cs] }\n    - { name: input-files, type: 'file[]', value: [ReCodEx_Csharp_Reader.cs, ReCodEx_Csharp_Wrapper.cs] }\n    - { name: main-class, type: string, value: CodEx.Wrapper }\n    - { name: assembly, type: file, value: program.exe }\n    - { name: extra-files, type: 'file[]', value: $extra-file-names }\n"
			- @demoAdmin

	pipelineConfig13:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: assembly } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: mono-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, assembly: { type: file, value: assembly } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: $actual-output }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: assembly, type: file, value: program.exe }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n"
			- @demoAdmin

	pipelineConfig14:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: assembly } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: mono-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, assembly: { type: file, value: assembly } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: '' }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: assembly, type: file, value: program.exe }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n"
			- @demoAdmin

	pipelineConfig15:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: node, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: $actual-output }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n    - { name: entry-point, type: file, value: $entry-point }\n    - { name: extra-files, type: 'file[]', value: {  } }\n"
			- @demoAdmin

	pipelineConfig16:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: node, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: '' }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n    - { name: entry-point, type: file, value: $entry-point }\n    - { name: extra-files, type: 'file[]', value: {  } }\n"
			- @demoAdmin

	pipelineConfig17:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: php, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: $actual-output }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n    - { name: entry-point, type: file, value: $entry-point }\n    - { name: extra-files, type: 'file[]', value: {  } }\n"
			- @demoAdmin

	pipelineConfig18:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: php, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: '' }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n    - { name: entry-point, type: file, value: $entry-point }\n    - { name: extra-files, type: 'file[]', value: {  } }\n"
			- @demoAdmin

	pipelineConfig19:
		__construct:
			- "boxes:\n    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }\n    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }\n    - { name: python3c, type: python3c, portsIn: { extra-files: { type: 'file[]', value: extra-files }, source-files: { type: 'file[]', value: source-files } }, portsOut: { pyc-files: { type: 'file[]', value: pyc-files } } }\n    - { name: pyc-file, type: files-out, portsIn: { output: { type: 'file[]', value: pyc-files } }, portsOut: {  } }\nvariables:\n    - { name: source-files, type: 'file[]', value: {  } }\n    - { name: extra-files, type: 'file[]', value: $extra-file-names }\n    - { name: pyc-files, type: 'file[]', value: {  } }\n"
			- @demoAdmin

	pipelineConfig20:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: pyc-files } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: python3, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, pyc-files: { type: 'file[]', value: pyc-files }, entry-point: { type: file, value: entry-point }, runner: { type: file, value: runner } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\n    - { name: fetch-runner, type: fetch-file, portsIn: { remote: { type: remote-file, value: runner-filename } }, portsOut: { input: { type: file, value: runner } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: $actual-output }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: pyc-files, type: 'file[]', value: {  } }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n    - { name: entry-point, type: file, value: $entry-point }\n    - { name: runner, type: file, value: '' }\n    - { name: runner-filename, type: remote-file, value: runner.py }\n"
			- @demoAdmin

	pipelineConfig21:
		__construct:
			- "boxes:\n    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }\n    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: pyc-files } } }\n    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }\n    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }\n    - { name: run, type: python3, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, pyc-files: { type: 'file[]', value: pyc-files }, entry-point: { type: file, value: entry-point }, runner: { type: file, value: runner } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }\n    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }\n    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }\n    - { name: fetch-runner, type: fetch-file, portsIn: { remote: { type: remote-file, value: runner-filename } }, portsOut: { input: { type: file, value: runner } } }\nvariables:\n    - { name: run-args, type: 'string[]', value: $run-args }\n    - { name: judge-type, type: string, value: $judge-type }\n    - { name: actual-output, type: file, value: '' }\n    - { name: expected-output, type: file, value: expected.out }\n    - { name: pyc-files, type: 'file[]', value: {  } }\n    - { name: stdin-file, type: file, value: '' }\n    - { name: input-files, type: 'file[]', value: $actual-inputs }\n    - { name: custom-judge, type: file, value: '' }\n    - { name: judge-args, type: 'string[]', value: $judge-args }\n    - { name: entry-point, type: file, value: $entry-point }\n    - { name: runner, type: file, value: '' }\n    - { name: runner-filename, type: remote-file, value: runner.py }\n"
			- @demoAdmin

App\Model\Entity\Pipeline:
	pipeline1:
		__construct:
			create:
				- null

		name: Compilation source file pass-through
		description: "Single file pass-through pipeline for submitted source file and extra files given by exercise author.\n\nInput variables:\n\n* source-file - single file which will be pass through this pipeline\n* extra-files - Extra array of files for compilation and execution which will be pass through\n\nOutput variables:\n\n* source-file - single file which can be used in following pipelines\n* extra-files - array of files which can be used in following pipelines"
		pipelineConfig: @pipelineConfig1
		runtimeEnvironments: []

	pipeline2:
		__construct:
			create:
				- null

		name: Compilation source files pass-through
		description: "Multiple files pass-through pipeline for submitted source files and extra files given by exercise author.\n\nInput variables:\n\n* source-file - array of files which will be pass through this pipeline\n* extra-files - Extra array of files for compilation and execution which will be pass through\n\nOutput variables:\n\n* source-file - array of files which can be used in following pipelines\n* extra-files - array of files which can be used in following pipelines"
		pipelineConfig: @pipelineConfig2
		runtimeEnvironments:
			- @node-linux
			- @php-linux

	pipeline3:
		__construct:
			create:
				- null

		name: Data-only judging
		description: "Data-only pipeline which will only perform judging of given source files against provided custom judge.\n\nInput variables:\n\n* source-files - array of files submitted by user, can be used in custom judge\n* input-files - array of files given by author of exercise, can be used in custom judge\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* custom-judge - author of exercise has to provide file for judging either as binary or executable script\n* run-args - array of strings which will be used as arguments for given custom judge"
		pipelineConfig: @pipelineConfig3
		runtimeEnvironments:
			- @data-linux

	pipeline4:
		__construct:
			create:
				- null

		name: "ELF execution & evaluation [outfile]"
		description: "Executes given ELF binary and run judge on file outputted from execution.\n\nInput variables:\n\n* binary-file - single file which will be executed\n* run-args - array of string arguments for given binary ELF file\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used in binary file\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* actual-output - file which is outputted by binary file has to be somehow identified, this variable should contain its name\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig4
		runtimeEnvironments:
			- @c-gcc-linux
			- @cxx-gcc-linux
			- @freepascal-linux

	pipeline5:
		__construct:
			create:
				- null

		name: "ELF execution & evaluation [stdout]"
		description: "Executes given ELF binary and run judge on standard output outputted from execution.\n\nInput variables:\n\n* binary-file - single file which will be executed\n* run-args - array of string arguments for given binary ELF file\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used in binary file\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig5
		runtimeEnvironments:
			- @c-gcc-linux
			- @cxx-gcc-linux
			- @freepascal-linux

	pipeline6:
		__construct:
			create:
				- null

		name: FreePascal Compilation
		description: "FreePascal compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `fpc` and default options are: `-O2`, `Sg`, `-Ci`, `-Cr`, `-Ct`.\n\nInput variables:\n\n* source-files - files submitted by user which will be compiled\n* extra-files - files given by exercise author, will be added to compilation\n* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present\n\nOutput variables:\n\n* binary-file - binary file outputted from compilation can be further processed in following pipelines"
		pipelineConfig: @pipelineConfig6
		runtimeEnvironments:
			- @freepascal-linux

	pipeline7:
		__construct:
			create:
				- null

		name: G++ Compilation
		description: "C++ compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `g++` and default options are: `-std=c++17`, `-O3`, `-lm`, `-pthread`.\n\nInput variables:\n\n* source-files - files submitted by user which will be compiled\n* extra-files - files given by exercise author, will be added to compilation\n* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present\n\nOutput variables:\n\n* binary-file - binary file outputted from compilation can be further processed in following pipelines"
		pipelineConfig: @pipelineConfig7
		runtimeEnvironments:
			- @cxx-gcc-linux

	pipeline8:
		__construct:
			create:
				- null

		name: GCC Compilation
		description: "C compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `gcc` and default options are: `-std=gnu11`, `-O3`, `-lm`.\n\nInput variables:\n\n* source-files - files submitted by user which will be compiled\n* extra-files - files given by exercise author, will be added to compilation\n* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present\n\nOutput variables:\n\n* binary-file - binary file outputted from compilation can be further processed in following pipelines"
		pipelineConfig: @pipelineConfig8
		runtimeEnvironments:
			- @c-gcc-linux

	pipeline9:
		__construct:
			create:
				- null

		name: "Java execution & evaluation [outfile]"
		description: "Executes Java application and run judge on file outputted from execution. Special `javarun.class` files is used as main entry point to the application. This class will try to find main class among submitted ones and execute it.\n\nInput variables:\n\n* classes - Java class files which should be executed, main class is automatically found and executed\n* run-args - array of string arguments for execution (not for JVM)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script\n* jar-files - optional jar files which should be used during compilation and execution"
		pipelineConfig: @pipelineConfig9
		runtimeEnvironments:
			- @java

	pipeline10:
		__construct:
			create:
				- null

		name: "Java execution & evaluation [stdout]"
		description: "Executes Java application and run judge on standard output outputted from execution. Special `javarun.class` files is used as main entry point to the application. This class will try to find main class among submitted ones and execute it.\n\nInput variables:\n\n* classes - Java class files which should be executed, main class is automatically found and executed\n* run-args - array of string arguments for execution (not for JVM)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script\n* jar-files - optional jar files which should be used during compilation and execution"
		pipelineConfig: @pipelineConfig10
		runtimeEnvironments:
			- @java

	pipeline11:
		__construct:
			create:
				- null

		name: Javac Compilation
		description: "Java compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `javac`.\n\nInput variables:\n\n* source-files - files submitted by user which will be compiled\n* extra-files - files given by exercise author, will be added to compilation\n* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present\n* jar-files - optional jar files which should be used during compilation and execution\n\nOutput variables:\n\n* classes - compiled files with bytecode which can be further processed in following pipelines\n* jar-files - jar files passed from compilation to execution"
		pipelineConfig: @pipelineConfig11
		runtimeEnvironments:
			- @java

	pipeline12:
		__construct:
			create:
				- null

		name: MCS Compilation
		description: "C# compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `csc`. During compilation there are added special `CodEx.Reader` and `CodEx.Wrapper` classes. `CodEx.Wrapper` is marked as main class and is effectively entry point in resulting assembly.\n\nInput variables:\n\n* source-files - files submitted by user which will be compiled\n* extra-files - files given by exercise author, will be added to compilation\n* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present\n\nOutput variables:\n\n* assembly - compiled bytecode CLR assembly which can be further processed in following pipelines"
		pipelineConfig: @pipelineConfig12
		runtimeEnvironments:
			- @mono

	pipeline13:
		__construct:
			create:
				- null

		name: "Mono execution & evaluation [outfile]"
		description: "Executes C# application and run judge on file outputted from execution.\n\nInput variables:\n\n* assembly - assembly file which will be executed\n* run-args - array of string arguments for execution (not for CLR)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig13
		runtimeEnvironments:
			- @mono

	pipeline14:
		__construct:
			create:
				- null

		name: "Mono execution & evaluation [stdout]"
		description: "Executes C# application and run judge on standard output outputted from execution.\n\nInput variables:\n\n* assembly - assembly file which will be executed\n* run-args - array of string arguments for execution (not for CLR)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig14
		runtimeEnvironments:
			- @mono

	pipeline15:
		__construct:
			create:
				- null

		name: "Node.js execution & evaluation [outfile]"
		description: "Executes Node.js application and run judge on file outputted from execution.\n\nInput variables:\n\n* source-files - files submitted by user which will be executed\n* extra-files - files given by exercise author, will be added to execution\n* entry-point - file which will be considered as entry point and run in Node.js runtime\n* run-args - array of string arguments for execution (not for Node.js runtime)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig15
		runtimeEnvironments:
			- @node-linux

	pipeline16:
		__construct:
			create:
				- null

		name: "Node.js execution & evaluation [stdout]"
		description: "Executes Node.js application and run judge on standard output outputted from execution.\n\nInput variables:\n\n* source-files - files submitted by user which will be executed\n* extra-files - files given by exercise author, will be added to execution\n* entry-point - file which will be considered as entry point and run in Node.js runtime\n* run-args - array of string arguments for execution (not for Node.js runtime)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig16
		runtimeEnvironments:
			- @node-linux

	pipeline17:
		__construct:
			create:
				- null

		name: "PHP execution & evaluation [outfile]"
		description: "Executes PHP application and run judge on file outputted from execution.\n\nInput variables:\n\n* source-files - files submitted by user which will be executed\n* extra-files - files given by exercise author, will be added to execution\n* entry-point - file which will be considered as entry point and run in PHP runtime\n* run-args - array of string arguments for execution (not for PHP runtime)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig17
		runtimeEnvironments:
			- @php-linux

	pipeline18:
		__construct:
			create:
				- null

		name: "PHP execution & evaluation [stdout]"
		description: "Executes PHP application and run judge on standard output outputted from execution.\n\nInput variables:\n\n* source-files - files submitted by user which will be executed\n* extra-files - files given by exercise author, will be added to execution\n* entry-point - file which will be considered as entry point and run in PHP runtime\n* run-args - array of string arguments for execution (not for PHP runtime)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig18
		runtimeEnvironments:
			- @php-linux

	pipeline19:
		__construct:
			create:
				- null

		name: Python compilation
		description: "Python compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `python3` with default options: `-m`, `compileall`.\n\nInput variables:\n\n* source-files - files submitted by user which will be compiled\n* extra-files - files given by exercise author, will be added to compilation\n* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present\n\nOutput variables:\n\n* pyc-files - python compiles source files into pyc files which can be further processed in following pipelines"
		pipelineConfig: @pipelineConfig19
		runtimeEnvironments:
			- @python3

	pipeline20:
		__construct:
			create:
				- null

		name: "Python execution & evaluation [outfile]"
		description: "Executes Python application and run judge on file outputted from execution.\n\nInput variables:\n\n* pyc-files - compiled python files which will be executed\n* entry-point - file which will be considered as entry point and run in Python runtime\n* run-args - array of string arguments for execution (not for Python runtime)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig20
		runtimeEnvironments:
			- @python3

	pipeline21:
		__construct:
			create:
				- null

		name: "Python execution & evaluation [stdout]"
		description: "Executes Python application and run judge on standard output outputted from execution.\n\nInput variables:\n\n* pyc-files - compiled python files which will be executed\n* entry-point - file which will be considered as entry point and run in Python runtime\n* run-args - array of string arguments for execution (not for Python runtime)\n* stdin-file - file which will be connected to standard input of execution\n* input-files - array of files given by author of exercise, can be used during execution\n* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files\n* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name\n* expected-output - file with expected results, will be used during judging\n* judge-type - textual representation of any supported judge if author wants to use built-in ones\n* judge-args - array of strings which will be used as additional arguments for judge\n* custom-judge - author of exercise can provide special file for judging either as binary or executable script"
		pipelineConfig: @pipelineConfig21
		runtimeEnvironments:
			- @python3

App\Model\Entity\BooleanPipelineParameter:
	pipeline1_isCompilationPipeline:
		__construct:
			- @pipeline1
			- isCompilationPipeline

		value: true

	pipeline2_isCompilationPipeline:
		__construct:
			- @pipeline2
			- isCompilationPipeline

		value: true

	pipeline3_isExecutionPipeline:
		__construct:
			- @pipeline3
			- isExecutionPipeline

		value: true

	pipeline3_judgeOnlyPipeline:
		__construct:
			- @pipeline3
			- judgeOnlyPipeline

		value: true

	pipeline4_isExecutionPipeline:
		__construct:
			- @pipeline4
			- isExecutionPipeline

		value: true

	pipeline4_producesFiles:
		__construct:
			- @pipeline4
			- producesFiles

		value: true

	pipeline5_isExecutionPipeline:
		__construct:
			- @pipeline5
			- isExecutionPipeline

		value: true

	pipeline5_producesStdout:
		__construct:
			- @pipeline5
			- producesStdout

		value: true

	pipeline6_isCompilationPipeline:
		__construct:
			- @pipeline6
			- isCompilationPipeline

		value: true

	pipeline7_isCompilationPipeline:
		__construct:
			- @pipeline7
			- isCompilationPipeline

		value: true

	pipeline8_isCompilationPipeline:
		__construct:
			- @pipeline8
			- isCompilationPipeline

		value: true

	pipeline9_isExecutionPipeline:
		__construct:
			- @pipeline9
			- isExecutionPipeline

		value: true

	pipeline9_producesFiles:
		__construct:
			- @pipeline9
			- producesFiles

		value: true

	pipeline10_isExecutionPipeline:
		__construct:
			- @pipeline10
			- isExecutionPipeline

		value: true

	pipeline10_producesStdout:
		__construct:
			- @pipeline10
			- producesStdout

		value: true

	pipeline11_isCompilationPipeline:
		__construct:
			- @pipeline11
			- isCompilationPipeline

		value: true

	pipeline12_isCompilationPipeline:
		__construct:
			- @pipeline12
			- isCompilationPipeline

		value: true

	pipeline13_isExecutionPipeline:
		__construct:
			- @pipeline13
			- isExecutionPipeline

		value: true

	pipeline13_producesFiles:
		__construct:
			- @pipeline13
			- producesFiles

		value: true

	pipeline14_isExecutionPipeline:
		__construct:
			- @pipeline14
			- isExecutionPipeline

		value: true

	pipeline14_producesStdout:
		__construct:
			- @pipeline14
			- producesStdout

		value: true

	pipeline15_hasEntryPoint:
		__construct:
			- @pipeline15
			- hasEntryPoint

		value: true

	pipeline15_isExecutionPipeline:
		__construct:
			- @pipeline15
			- isExecutionPipeline

		value: true

	pipeline15_producesFiles:
		__construct:
			- @pipeline15
			- producesFiles

		value: true

	pipeline16_hasEntryPoint:
		__construct:
			- @pipeline16
			- hasEntryPoint

		value: true

	pipeline16_isExecutionPipeline:
		__construct:
			- @pipeline16
			- isExecutionPipeline

		value: true

	pipeline16_producesStdout:
		__construct:
			- @pipeline16
			- producesStdout

		value: true

	pipeline17_isExecutionPipeline:
		__construct:
			- @pipeline17
			- isExecutionPipeline

		value: true

	pipeline17_producesFiles:
		__construct:
			- @pipeline17
			- producesFiles

		value: true

	pipeline17_hasEntryPoint:
		__construct:
			- @pipeline17
			- hasEntryPoint

		value: true

	pipeline18_isExecutionPipeline:
		__construct:
			- @pipeline18
			- isExecutionPipeline

		value: true

	pipeline18_producesStdout:
		__construct:
			- @pipeline18
			- producesStdout

		value: true

	pipeline18_hasEntryPoint:
		__construct:
			- @pipeline18
			- hasEntryPoint

		value: true

	pipeline19_isCompilationPipeline:
		__construct:
			- @pipeline19
			- isCompilationPipeline

		value: true

	pipeline20_isExecutionPipeline:
		__construct:
			- @pipeline20
			- isExecutionPipeline

		value: true

	pipeline20_producesFiles:
		__construct:
			- @pipeline20
			- producesFiles

		value: true

	pipeline20_hasEntryPoint:
		__construct:
			- @pipeline20
			- hasEntryPoint

		value: true

	pipeline21_isExecutionPipeline:
		__construct:
			- @pipeline21
			- isExecutionPipeline

		value: true

	pipeline21_producesStdout:
		__construct:
			- @pipeline21
			- producesStdout

		value: true

	pipeline21_hasEntryPoint:
		__construct:
			- @pipeline21
			- hasEntryPoint

		value: true

