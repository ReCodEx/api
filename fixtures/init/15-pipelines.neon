parameters:
	param_config_pipelineConfig1:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: script-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files }, runtime-path: { type: string, value: runtime-path }, runtime-args: { type: 'string[]', value: runtime-args } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: file, value: $entry-point }
			    - { name: extra-files, type: 'file[]', value: {  } }
			    - { name: runtime-path, type: 'string', value: '/bin/bash' }
			    - { name: runtime-args, type: 'string[]', value: {  } }
			
		"""
	param_config_pipelineConfig2:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: script-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files }, runtime-path: { type: string, value: runtime-path }, runtime-args: { type: 'string[]', value: runtime-args } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: file, value: $entry-point }
			    - { name: extra-files, type: 'file[]', value: {  } }
			    - { name: runtime-path, type: 'string', value: '/bin/bash' }
			    - { name: runtime-args, type: 'string[]', value: {  } }
			
		"""
	param_config_pipelineConfig3:
		"""
			boxes:
			    - { name: source, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: source-file } } }
			    - { name: out, type: file-out, portsIn: { output: { type: file, value: source-file } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: extras-out, type: files-out, portsIn: { output: { type: 'file[]', value: extra-files } }, portsOut: {  } }
			variables:
			    - { name: source-file, type: file, value: '' }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			
		"""
	param_config_pipelineConfig4:
		"""
			boxes:
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: outs, type: files-out, portsIn: { output: { type: 'file[]', value: source-files } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: extras-out, type: files-out, portsIn: { output: { type: 'file[]', value: extra-files } }, portsOut: {  } }
			variables:
			    - { name: source-files, type: 'file[]', value: [] }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			
		"""
	param_config_pipelineConfig5:
		"""
			---
			boxes:
			  -
			    name: inputs
			    portsIn: {}
			    portsOut:
			      input:
			        type: file[]
			        value: input-files
			    type: files-in
			  -
			    name: merge
			    portsIn:
			      in1:
			        type: file[]
			        value: input-files
			      in2:
			        type: file[]
			        value: source-files
			    portsOut:
			      out:
			        type: file[]
			        value: merged-files
			    type: merge-files
			  -
			    name: run
			    portsIn:
			      runtime-path:
			        type: string
			        value: runtime-path
			      runtime-args:
			        type: string[]
			        value: runtime-args
			      args:
			        type: string[]
			        value: run-args
			      binary-file:
			        type: file
			        value: custom-judge
			      input-files:
			        type: file[]
			        value: merged-files
			      stdin:
			        type: file
			        value: ""
			    portsOut:
			      output-file:
			        type: file
			        value: ""
			      stdout:
			        type: file
			        value: actual-output
			    type: wrapped-exec
			  -
			    name: judge
			    portsIn:
			      actual-output:
			        type: file
			        value: actual-output
			      args:
			        type: string[]
			        value: judge-args
			      custom-judge:
			        type: file
			        value: ""
			      expected-output:
			        type: file
			        value: actual-output
			      judge-type:
			        type: string
			        value: judge-type
			    portsOut: {}
			    type: judge
			  -
			    name: source-files
			    portsIn: {}
			    portsOut:
			      input:
			        type: file[]
			        value: source-files
			    type: files-in
			  -
			    name: custom-judge
			    portsIn: {}
			    portsOut:
			      input:
			        type: file
			        value: custom-judge
			    type: file-in
			variables:
			  -
			    name: runtime-path
			    type: string
			    value: /usr/bin/recodex-data-only-wrapper.sh
			  -
			    name: runtime-args
			    type: string[]
			    value: []
			  -
			    name: run-args
			    type: string[]
			    value: $run-args
			  -
			    name: judge-type
			    type: string
			    value: recodex-judge-passthrough
			  -
			    name: actual-output
			    type: file
			    value: ""
			  -
			    name: input-files
			    type: file[]
			    value: $actual-inputs
			  -
			    name: source-files
			    type: file[]
			    value: []
			  -
			    name: merged-files
			    type: file[]
			    value: []
			  -
			    name: custom-judge
			    type: file
			    value: ""
			  -
			    name: judge-args
			    type: string[]
			    value: []
		"""
	param_config_pipelineConfig6:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: binary-file } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: elf-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, binary-file: { type: file, value: binary-file } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: binary-file, type: file, value: a.out }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			
		"""
	param_config_pipelineConfig7:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: binary-file } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: elf-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, binary-file: { type: file, value: binary-file } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: binary-file, type: file, value: a.out }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			
		"""
	param_config_pipelineConfig8:
		"""
			boxes:
			    - { name: output, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compile, type: fpc, portsIn: { args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: args, type: 'string[]', value: ['-O2', '-Sg', '-Ci', '-Cr', '-Ct'] }
			    - { name: binary-file, type: file, value: a.out }
			    - { name: source-files, type: 'file[]', value: '' }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			
		"""
	param_config_pipelineConfig9:
		"""
			boxes:
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: g++, portsIn: { args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }
			    - { name: binary, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: args, type: 'string[]', value: ['-std=c++17', '-O3', '-lm', '-pthread'] }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			    - { name: binary-file, type: file, value: a.out }
			
		"""
	param_config_pipelineConfig10:
		"""
			boxes:
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: gcc, portsIn: { args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }
			    - { name: binary, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: args, type: 'string[]', value: ['-std=gnu11', '-O3', '-lm'] }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: binary-file, type: file, value: a.out }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			
		"""
	param_config_pipelineConfig11:
		"""
			boxes:
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: custom-compilation, portsIn: { compiler-exec: { type: 'string', value: compiler-exec }, args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }
			    - { name: binary, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: compiler-exec, type: 'string', value: /usr/bin/go }
			    - { name: args, type: 'string[]', value: ['build', '-o', 'a.out'] }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			    - { name: binary-file, type: file, value: a.out }
			
		"""
	param_config_pipelineConfig12:
		"""
			---
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: runner, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: runner-file } } }
			    - { name: classes-dir, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: classes-dir } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: jvm-runner, portsIn: { runner-exec: { type: string, value: runner-exec }, runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files-dir: { type: 'file', value: classes-dir }, jar-files: { type: 'file[]', value: jar-files }, classpath: { type: 'string[]', value: classpath } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			variables:
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: runner-exec, type: 'string', value: '/usr/bin/java' }
			    - { name: classpath, type: 'string[]', value: [ '/opt/groovy/groovy.jar' ] }
			...
		"""
	param_config_pipelineConfig13:
		"""
			---
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: runner, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: runner-file } } }
			    - { name: classes-dir, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: classes-dir } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: jvm-runner, portsIn: { runner-exec: { type: string, value: runner-exec }, runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files-dir: { type: 'file', value: classes-dir }, jar-files: { type: 'file[]', value: jar-files }, classpath: { type: 'string[]', value: classpath } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			variables:
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: runner-exec, type: 'string', value: '/usr/bin/java' }
			    - { name: classpath, type: 'string[]', value: [ '/opt/groovy/groovy.jar' ] }
			...
		"""
	param_config_pipelineConfig14:
		"""
			---
			boxes:
			    - { name: runner-fetch, type: fetch-file, portsIn: { remote: { type: remote-file, value: remote-runner } }, portsOut: { input: { type: file, value: runner-file } } }
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: jvm-compilation, portsIn: { compiler-exec: { type: 'string', value: compiler-exec }, args: { type: 'string[]', value: '' }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { class-files-dir: { type: 'file', value: classes-dir } } }
			    - { name: classes-dir, type: file-out, portsIn: { output: { type: 'file', value: classes-dir } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			    - { name: jars-passed, type: files-out, portsIn: { output: { type: 'file[]', value: jar-files } }, portsOut: {  } }
			    - { name: runner-passed, type: file-out, portsIn: { output: { type: 'file', value: runner-file } }, portsOut: {  } }
			variables:
			    - { name: remote-runner, type: remote-file, value: javarun.class }
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: compiler-exec, type: 'string', value: '/usr/bin/groovyc' }
			...
		"""
	param_config_pipelineConfig15:
		"""
			boxes:
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: sources-out, type: files-out, portsIn: { output: { type: 'file[]', value: source-files } }, portsOut: {  } }
			    - { name: compilation, type: haskell-compilation, portsIn: { args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }
			    - { name: binary, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: extras-out, type: files-out, portsIn: { output: { type: 'file[]', value: extra-files } }, portsOut: {  } }
			variables:
			    - { name: args, type: 'string[]', value: {  } }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: binary-file, type: file, value: '' }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			
		"""
	param_config_pipelineConfig16:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: binary-file } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: exec, type: haskell-exec, portsIn: { stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, entry-point: { type: string, value: entry-point }, binary-file: { type: 'file', value: binary-file }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			variables:
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: '' }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: string, value: $entry-point }
			    - { name: extra-files, type: 'file[]', value: {  } }
			    - { name: binary-file, type: 'file', value: '' }
			
		"""
	param_config_pipelineConfig17:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: runner-fetch, type: fetch-file, portsIn: { remote: { type: remote-file, value: remote-runner } }, portsOut: { input: { type: file, value: runner-file } } }
			    - { name: classes, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: classes } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: java-runner, portsIn: { runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files: { type: 'file[]', value: classes }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			variables:
			    - { name: remote-runner, type: remote-file, value: javarun.class }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: classes, type: 'file[]', value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: jar-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig18:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: runner-fetch, type: fetch-file, portsIn: { remote: { type: remote-file, value: remote-runner } }, portsOut: { input: { type: file, value: runner-file } } }
			    - { name: classes, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: classes } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: java-runner, portsIn: { runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files: { type: 'file[]', value: classes }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			variables:
			    - { name: remote-runner, type: remote-file, value: javarun.class }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: classes, type: 'file[]', value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: jar-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig19:
		"""
			boxes:
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: javac, portsIn: { args: { type: 'string[]', value: '' }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { class-files: { type: 'file[]', value: classes } } }
			    - { name: classes, type: files-out, portsIn: { output: { type: 'file[]', value: classes } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			    - { name: jars-passed, type: files-out, portsIn: { output: { type: 'file[]', value: jar-files } }, portsOut: {  } }
			variables:
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: classes, type: 'file[]', value: {  } }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			    - { name: jar-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig20:
		"""
			---
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: runner, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: runner-file } } }
			    - { name: classes-dir, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: classes-dir } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: jvm-runner, portsIn: { runner-exec: { type: string, value: runner-exec }, runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files-dir: { type: 'file', value: classes-dir }, jar-files: { type: 'file[]', value: jar-files }, classpath: { type: 'string[]', value: classpath } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			variables:
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: runner-exec, type: 'string', value: '/usr/bin/java' }
			    - { name: classpath, type: 'string[]', value: [ '/opt/kotlin/lib/kotlin-stdlib.jar', '/opt/kotlin/lib/kotlin-reflect.jar' ] }
			...
		"""
	param_config_pipelineConfig21:
		"""
			---
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: runner, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: runner-file } } }
			    - { name: classes-dir, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: classes-dir } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: jvm-runner, portsIn: { runner-exec: { type: string, value: runner-exec }, runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files-dir: { type: 'file', value: classes-dir }, jar-files: { type: 'file[]', value: jar-files }, classpath: { type: 'string[]', value: classpath } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			variables:
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: runner-exec, type: 'string', value: '/usr/bin/java' }
			    - { name: classpath, type: 'string[]', value: [ '/opt/kotlin/lib/kotlin-stdlib.jar', '/opt/kotlin/lib/kotlin-reflect.jar' ] }
			...
		"""
	param_config_pipelineConfig22:
		"""
			---
			boxes:
			    - { name: runner-fetch, type: fetch-file, portsIn: { remote: { type: remote-file, value: remote-runner } }, portsOut: { input: { type: file, value: runner-file } } }
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: jvm-compilation, portsIn: { compiler-exec: { type: 'string', value: compiler-exec }, args: { type: 'string[]', value: '' }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { class-files-dir: { type: 'file', value: classes-dir } } }
			    - { name: classes-dir, type: file-out, portsIn: { output: { type: 'file', value: classes-dir } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			    - { name: jars-passed, type: files-out, portsIn: { output: { type: 'file[]', value: jar-files } }, portsOut: {  } }
			    - { name: runner-passed, type: file-out, portsIn: { output: { type: 'file', value: runner-file } }, portsOut: {  } }
			variables:
			    - { name: remote-runner, type: remote-file, value: javarun.class }
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: compiler-exec, type: 'string', value: '/usr/bin/kotlinc' }
			...
		"""
	param_config_pipelineConfig23:
		"""
			boxes:
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: external-sources, type: fetch-files, portsIn: { remote: { type: 'remote-file[]', value: external-sources } }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: compilation, type: mcs, portsIn: { args: { type: 'string[]', value: '' }, main-class: { type: string, value: main-class }, external-sources: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { assembly: { type: file, value: assembly } } }
			    - { name: assembly, type: file-out, portsIn: { output: { type: file, value: assembly } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: external-sources, type: 'remote-file[]', value: [Reader.cs, Wrapper.cs] }
			    - { name: input-files, type: 'file[]', value: [ReCodEx_Csharp_Reader.cs, ReCodEx_Csharp_Wrapper.cs] }
			    - { name: main-class, type: string, value: CodEx.Wrapper }
			    - { name: assembly, type: file, value: program.exe }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			
		"""
	param_config_pipelineConfig24:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: assembly } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: mono-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, assembly: { type: file, value: assembly } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: assembly, type: file, value: program.exe }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			
		"""
	param_config_pipelineConfig25:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: binary, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: assembly } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: mono-exec, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, assembly: { type: file, value: assembly } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: assembly, type: file, value: program.exe }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			
		"""
	param_config_pipelineConfig26:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: node, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: file, value: $entry-point }
			    - { name: extra-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig27:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: node, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: file, value: $entry-point }
			    - { name: extra-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig28:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: php, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: file, value: $entry-point }
			    - { name: extra-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig29:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: php, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, source-files: { type: 'file[]', value: source-files }, entry-point: { type: file, value: entry-point }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: file, value: $entry-point }
			    - { name: extra-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig30:
		"""
			boxes:
			    - { name: fetch-init, type: fetch-file, portsIn: { remote: { type: remote-file, value: init-filename } }, portsOut: { input: { type: file, value: init } } }
			    - { name: fetch-wrapper, type: fetch-file, portsIn: { remote: { type: remote-file, value: wrapper-filename } }, portsOut: { input: { type: file, value: wrapper } } }
			    - { name: fetch-runner, type: fetch-file, portsIn: { remote: { type: remote-file, value: runner-filename } }, portsOut: { input: { type: file, value: runner } } }
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: prolog-compilation, portsIn: { compilation-wrapper: { type: 'file', value: wrapper }, init-file: { type: 'file', value: init }, runner: { type: 'file', value: runner }, args: { type: 'string[]', value: args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }
			    - { name: binary, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: args, type: 'string[]', value: ['-q', '-g', 'recodex_main'] }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			    - { name: binary-file, type: file, value: a.out }
			    - { name: init, type: file, value: recodex-init.pl }
			    - { name: init-filename, type: remote-file, value: recodex-init.pl }
			    - { name: wrapper, type: file, value: recodex-swipl-wrapper.sh }
			    - { name: wrapper-filename, type: remote-file, value: recodex-swipl-wrapper.sh }
			    - { name: runner, type: file, value: recodex-wrapper.pl }
			    - { name: runner-filename, type: remote-file, value: recodex-wrapper.pl }
			
		"""
	param_config_pipelineConfig31:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: python3, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, entry-point: { type: file, value: entry-point }, runner: { type: file, value: runner }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: fetch-runner, type: fetch-file, portsIn: { remote: { type: remote-file, value: runner-filename } }, portsOut: { input: { type: file, value: runner } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: '' }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: file, value: $entry-point }
			    - { name: runner, type: file, value: '' }
			    - { name: runner-filename, type: remote-file, value: runner.py }
			    - { name: extra-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig32:
		"""
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: source, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: python3, portsIn: { args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, entry-point: { type: file, value: entry-point }, runner: { type: file, value: runner }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: fetch-runner, type: fetch-file, portsIn: { remote: { type: remote-file, value: runner-filename } }, portsOut: { input: { type: file, value: runner } } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			variables:
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: source-files, type: 'file[]', value: '' }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: entry-point, type: file, value: $entry-point }
			    - { name: runner, type: file, value: '' }
			    - { name: runner-filename, type: remote-file, value: runner.py }
			    - { name: extra-files, type: 'file[]', value: {  } }
			
		"""
	param_config_pipelineConfig33:
		"""
			boxes:
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: custom-compilation, portsIn: { compiler-exec: { type: 'string', value: compiler-exec }, args: { type: 'string[]', value: merged-args }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files } }, portsOut: { binary-file: { type: file, value: binary-file } } }
			    - { name: binary, type: file-out, portsIn: { output: { type: file, value: binary-file } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: entry-point-to-text, type: file-name, portsIn: { in: { type: 'file', value: entry-point } }, portsOut: { out: { type: 'string', value: entry-point-text } } }
			    - { name: entry-point-text-to-array, type: string-to-array, portsIn: { in: { type: 'string', value: entry-point-text } }, portsOut: { out: { type: 'string[]', value: entry-point-text-array } } }
			    - { name: merge-args, type: merge-strings, portsIn: { in1: { type: 'string[]', value: args }, in2: { type: 'string[]', value: entry-point-text-array} }, portsOut: { out: { type: 'string[]', value: merged-args } } }
			variables:
			    - { name: compiler-exec, type: 'string', value: /usr/bin/rustc }
			    - { name: merged-args, type: 'string[]', value: {  } }
			    - { name: args, type: 'string[]', value: ['-o', 'a.out'] }
			    - { name: entry-point, type: 'file', value: $entry-point }
			    - { name: entry-point-text, type: 'string', value: '' }
			    - { name: entry-point-text-array, type: 'string[]', value: {  } }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			    - { name: binary-file, type: file, value: a.out }
			
		"""
	param_config_pipelineConfig34:
		"""
			---
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: runner, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: runner-file } } }
			    - { name: classes-dir, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: classes-dir } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: jvm-runner, portsIn: { runner-exec: { type: string, value: runner-exec }, runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files-dir: { type: 'file', value: classes-dir }, jar-files: { type: 'file[]', value: jar-files }, classpath: { type: 'string[]', value: classpath } }, portsOut: { stdout: { type: file, value: '' }, output-file: { type: file, value: actual-output } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			variables:
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: $actual-output }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: runner-exec, type: 'string', value: '/usr/bin/scala' }
			    - { name: classpath, type: 'string[]', value: {} }
			...
		"""
	param_config_pipelineConfig35:
		"""
			---
			boxes:
			    - { name: input, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: stdin-file } } }
			    - { name: runner, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: runner-file } } }
			    - { name: classes-dir, type: file-in, portsIn: {  }, portsOut: { input: { type: 'file', value: classes-dir } } }
			    - { name: expected, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: expected-output } } }
			    - { name: judge, type: judge, portsIn: { judge-type: { type: string, value: judge-type }, actual-output: { type: file, value: actual-output }, expected-output: { type: file, value: expected-output }, args: { type: 'string[]', value: judge-args }, custom-judge: { type: file, value: custom-judge } }, portsOut: {  } }
			    - { name: run, type: jvm-runner, portsIn: { runner-exec: { type: string, value: runner-exec }, runner: { type: file, value: runner-file }, args: { type: 'string[]', value: run-args }, stdin: { type: file, value: stdin-file }, input-files: { type: 'file[]', value: input-files }, class-files-dir: { type: 'file', value: classes-dir }, jar-files: { type: 'file[]', value: jar-files }, classpath: { type: 'string[]', value: classpath } }, portsOut: { stdout: { type: file, value: actual-output }, output-file: { type: file, value: '' } } }
			    - { name: input-files, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: input-files } } }
			    - { name: custom-judge, type: file-in, portsIn: {  }, portsOut: { input: { type: file, value: custom-judge } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			variables:
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: judge-type, type: string, value: $judge-type }
			    - { name: actual-output, type: file, value: '' }
			    - { name: expected-output, type: file, value: expected.out }
			    - { name: run-args, type: 'string[]', value: $run-args }
			    - { name: stdin-file, type: file, value: '' }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: input-files, type: 'file[]', value: $actual-inputs }
			    - { name: custom-judge, type: file, value: '' }
			    - { name: judge-args, type: 'string[]', value: $judge-args }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: runner-exec, type: 'string', value: '/usr/bin/scala' }
			    - { name: classpath, type: 'string[]', value: {} }
			...
		"""
	param_config_pipelineConfig36:
		"""
			---
			boxes:
			    - { name: runner-fetch, type: fetch-file, portsIn: { remote: { type: remote-file, value: remote-runner } }, portsOut: { input: { type: file, value: runner-file } } }
			    - { name: sources, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: source-files } } }
			    - { name: compilation, type: jvm-compilation, portsIn: { compiler-exec: { type: 'string', value: compiler-exec }, args: { type: 'string[]', value: '' }, source-files: { type: 'file[]', value: source-files }, extra-files: { type: 'file[]', value: extra-files }, jar-files: { type: 'file[]', value: jar-files } }, portsOut: { class-files-dir: { type: 'file', value: classes-dir } } }
			    - { name: classes-dir, type: file-out, portsIn: { output: { type: 'file', value: classes-dir } }, portsOut: {  } }
			    - { name: extras, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: extra-files } } }
			    - { name: jars, type: files-in, portsIn: {  }, portsOut: { input: { type: 'file[]', value: jar-files } } }
			    - { name: jars-passed, type: files-out, portsIn: { output: { type: 'file[]', value: jar-files } }, portsOut: {  } }
			    - { name: runner-passed, type: file-out, portsIn: { output: { type: 'file', value: runner-file } }, portsOut: {  } }
			variables:
			    - { name: remote-runner, type: remote-file, value: javarun.class }
			    - { name: runner-file, type: file, value: javarun.class }
			    - { name: source-files, type: 'file[]', value: {  } }
			    - { name: classes-dir, type: 'file', value: '' }
			    - { name: extra-files, type: 'file[]', value: $extra-file-names }
			    - { name: jar-files, type: 'file[]', value: {  } }
			    - { name: compiler-exec, type: 'string', value: '/usr/bin/scalac' }
			...
			
		"""
	param_name_pipeline1: "Bash execution & evaluation [outfile]"
	param_description_pipeline1:
		"""
			Executes Bash shell script marked as entry point and run judge on the file outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - file which will be considered as entry point and run in Bash
			* run-args - array of string arguments which will be given to the executed script
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline2: "Bash execution & evaluation [stdout]"
	param_description_pipeline2:
		"""
			Executes Bash shell script marked as entry point and run judge on the standard output outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - file which will be considered as entry point and run in Bash
			* run-args - array of string arguments which will be given to the executed script
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline3: Compilation source file pass-through
	param_description_pipeline3:
		"""
			Single file pass-through pipeline for submitted source file and extra files given by exercise author.
			
			Input variables:
			
			* source-file - single file which will be pass through this pipeline
			* extra-files - Extra array of files for compilation and execution which will be pass through
			
			Output variables:
			
			* source-file - single file which can be used in following pipelines
			* extra-files - array of files which can be used in following pipelines
		"""
	param_name_pipeline4: Compilation source files pass-through
	param_description_pipeline4:
		"""
			Multiple files pass-through pipeline for submitted source files and extra files given by exercise author.
			
			Input variables:
			
			* source-file - array of files which will be pass through this pipeline
			* extra-files - Extra array of files for compilation and execution which will be pass through
			
			Output variables:
			
			* source-file - array of files which can be used in following pipelines
			* extra-files - array of files which can be used in following pipelines
		"""
	param_name_pipeline5: Data-only judging
	param_description_pipeline5:
		"""
			Data-only pipeline which will only perform judging of given source files against provided custom judge.
			
			Input variables:
			
			* source-files - array of files submitted by user, can be used in custom judge
			* input-files - array of files given by author of exercise, can be used in custom judge
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* custom-judge - author of exercise has to provide file for judging either as binary or executable script
			* run-args - array of strings which will be used as arguments for given custom judge
		"""
	param_name_pipeline6: "ELF execution & evaluation [outfile]"
	param_description_pipeline6:
		"""
			Executes given ELF binary and run judge on file outputted from execution.
			
			Input variables:
			
			* binary-file - single file which will be executed
			* run-args - array of string arguments for given binary ELF file
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used in binary file
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by binary file has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline7: "ELF execution & evaluation [stdout]"
	param_description_pipeline7:
		"""
			Executes given ELF binary and run judge on standard output outputted from execution.
			
			Input variables:
			
			* binary-file - single file which will be executed
			* run-args - array of string arguments for given binary ELF file
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used in binary file
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline8: FreePascal Compilation
	param_description_pipeline8:
		"""
			FreePascal compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `fpc` and default options are: `-O2`, `Sg`, `-Ci`, `-Cr`, `-Ct`.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			
			Output variables:
			
			* binary-file - binary file outputted from compilation can be further processed in following pipelines
		"""
	param_name_pipeline9: G++ Compilation
	param_description_pipeline9:
		"""
			C++ compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `g++` and default options are: `-std=c++17`, `-O3`, `-lm`, `-pthread`.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			
			Output variables:
			
			* binary-file - binary file outputted from compilation can be further processed in following pipelines
		"""
	param_name_pipeline10: GCC Compilation
	param_description_pipeline10:
		"""
			C compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `gcc` and default options are: `-std=gnu11`, `-O3`, `-lm`.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			
			Output variables:
			
			* binary-file - binary file outputted from compilation can be further processed in following pipelines
		"""
	param_name_pipeline11: Go Compilation
	param_description_pipeline11:
		"""
			Go compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `go` and there are no default options.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			
			Output variables:
			
			* binary-file - binary file outputted from compilation can be further processed in following pipelines
		"""
	param_name_pipeline12: "Groovy execution & evaluation [outfile]"
	param_description_pipeline12:
		"""
			Executes Groovy application and run judge on file outputted from execution. Special `javarun.class` files is used as main entry point to the application. This class will try to find main class among submitted ones and execute it. Groovy is executed using `java` JDK runtime with the addition of Groovy standard library `groovy-all.jar`.
			
			Input variables:
			
			* runner-file - compiled class file which will serve as wrapper for execution
			* classes-dir - directory containing JVM class files which should be executed, main class is automatically found and executed
			* run-args - array of string arguments for execution (not for JVM)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
			* jar-files - optional jar files which should be used during compilation and execution
		"""
	param_name_pipeline13: "Groovy execution & evaluation [stdout]"
	param_description_pipeline13:
		"""
			Executes Groovy application and run judge on standard output outputted from execution. Special `javarun.class` file is used as main entry point to the application. This class will try to find main class among submitted ones and execute it. Groovy is executed using `java` JDK runtime with the addition of Groovy standard library `groovy-all.jar`.
			
			Input variables:
			
			* runner-file - compiled class file which will serve as wrapper for execution
			* classes-dir - directory containing JVM class files which should be executed, main class is automatically found and executed
			* run-args - array of string arguments for execution (not for JVM)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
			* jar-files - optional jar files which should be used during compilation and execution
		"""
	param_name_pipeline14: Groovyc compilation
	param_description_pipeline14:
		"""
			Groovy compilation which compiles submitted files by user, provided extra files from exercise author and potentially JAR files provided by exercise author. Used compiler is `groovyc` which compiles sources to class files. Pipeline also fetches execution runner and sends it to execution pipeline.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			* jar-files - optional jar files which should be used during compilation and execution
			* runner-file - mandatory runner class file which will be used as a wrapper executor
			
			Output variables:
			
			* classes-dir - compiled files with bytecode which can be further processed in following pipelines resides in this directory
			* jar-files - jar files passed from compilation to execution
			* runner-file - runner class file passed from compilation to execution
		"""
	param_name_pipeline15: Haskell Compilation
	param_description_pipeline15:
		"""
			Haskell compilation using GHC which compiles submitted files by user and provided extra files from exercise author.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			
			Output variables:
			
			* binary-file - pseudo-link from this compilation to Haskell execution
		"""
	param_name_pipeline16: "Haskell execution & evaluation [stdout]"
	param_description_pipeline16:
		"""
			Executes Haskell application using GHCI and run judge on standard output outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - Haskell function which will be considered as entry point and run
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline17: "Java execution & evaluation [outfile]"
	param_description_pipeline17:
		"""
			Executes Java application and run judge on file outputted from execution. Special `javarun.class` files is used as main entry point to the application. This class will try to find main class among submitted ones and execute it.
			
			Input variables:
			
			* classes - Java class files which should be executed, main class is automatically found and executed
			* run-args - array of string arguments for execution (not for JVM)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
			* jar-files - optional jar files which should be used during compilation and execution
		"""
	param_name_pipeline18: "Java execution & evaluation [stdout]"
	param_description_pipeline18:
		"""
			Executes Java application and run judge on standard output outputted from execution. Special `javarun.class` files is used as main entry point to the application. This class will try to find main class among submitted ones and execute it.
			
			Input variables:
			
			* classes - Java class files which should be executed, main class is automatically found and executed
			* run-args - array of string arguments for execution (not for JVM)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
			* jar-files - optional jar files which should be used during compilation and execution
		"""
	param_name_pipeline19: Javac Compilation
	param_description_pipeline19:
		"""
			Java compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `javac`.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			* jar-files - optional jar files which should be used during compilation and execution
			
			Output variables:
			
			* classes - compiled files with bytecode which can be further processed in following pipelines
			* jar-files - jar files passed from compilation to execution
		"""
	param_name_pipeline20: "Kotlin execution & evaluation [outfile]"
	param_description_pipeline20:
		"""
			Executes Kotlin application and run judge on file outputted from execution. Special `javarun.class` files is used as main entry point to the application. This class will try to find main class among submitted ones and execute it. Kotlin is executed using `java` JDK runtime with the addition of Kotlin standard libraries, namely `kotlin-stdlib.jar` and `kotlin-reflect.jar`.
			
			Input variables:
			
			* runner-file - compiled class file which will serve as wrapper for execution
			* classes-dir - directory containing JVM class files which should be executed, main class is automatically found and executed
			* run-args - array of string arguments for execution (not for JVM)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
			* jar-files - optional jar files which should be used during compilation and execution
		"""
	param_name_pipeline21: "Kotlin execution & evaluation [stdout]"
	param_description_pipeline21:
		"""
			Executes Kotlin application and run judge on standard output outputted from execution. Special `javarun.class` file is used as main entry point to the application. This class will try to find main class among submitted ones and execute it. Kotlin is executed using `java` JDK runtime with the addition of Kotlin standard libraries, namely `kotlin-stdlib.jar` and `kotlin-reflect.jar`.
			
			Input variables:
			
			* runner-file - compiled class file which will serve as wrapper for execution
			* classes-dir - directory containing JVM class files which should be executed, main class is automatically found and executed
			* run-args - array of string arguments for execution (not for JVM)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
			* jar-files - optional jar files which should be used during compilation and execution
		"""
	param_name_pipeline22: Kotlinc compilation
	param_description_pipeline22:
		"""
			Kotlin compilation which compiles submitted files by user, provided extra files from exercise author and potentially JAR files provided by exercise author. Used compiler is `kotlinc` which compiles sources to class files. Pipeline also fetches execution runner and sends it to execution pipeline.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			* jar-files - optional jar files which should be used during compilation and execution
			* runner-file - mandatory runner class file which will be used as a wrapper executor
			
			Output variables:
			
			* classes-dir - compiled files with bytecode which can be further processed in following pipelines resides in this directory
			* jar-files - jar files passed from compilation to execution
			* runner-file - runner class file passed from compilation to execution
		"""
	param_name_pipeline23: MCS Compilation
	param_description_pipeline23:
		"""
			C# compilation which compiles submitted files by user and provided extra files from exercise author. Compiler is `csc`. During compilation there are added special `CodEx.Reader` and `CodEx.Wrapper` classes. `CodEx.Wrapper` is marked as main class and is effectively entry point in resulting assembly.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			
			Output variables:
			
			* assembly - compiled bytecode CLR assembly which can be further processed in following pipelines
		"""
	param_name_pipeline24: "Mono execution & evaluation [outfile]"
	param_description_pipeline24:
		"""
			Executes C# application and run judge on file outputted from execution.
			
			Input variables:
			
			* assembly - assembly file which will be executed
			* run-args - array of string arguments for execution (not for CLR)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline25: "Mono execution & evaluation [stdout]"
	param_description_pipeline25:
		"""
			Executes C# application and run judge on standard output outputted from execution.
			
			Input variables:
			
			* assembly - assembly file which will be executed
			* run-args - array of string arguments for execution (not for CLR)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline26: "Node.js execution & evaluation [outfile]"
	param_description_pipeline26:
		"""
			Executes Node.js application and run judge on file outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - file which will be considered as entry point and run in Node.js runtime
			* run-args - array of string arguments for execution (not for Node.js runtime)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline27: "Node.js execution & evaluation [stdout]"
	param_description_pipeline27:
		"""
			Executes Node.js application and run judge on standard output outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - file which will be considered as entry point and run in Node.js runtime
			* run-args - array of string arguments for execution (not for Node.js runtime)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline28: "PHP execution & evaluation [outfile]"
	param_description_pipeline28:
		"""
			Executes PHP application and run judge on file outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - file which will be considered as entry point and run in PHP runtime
			* run-args - array of string arguments for execution (not for PHP runtime)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline29: "PHP execution & evaluation [stdout]"
	param_description_pipeline29:
		"""
			Executes PHP application and run judge on standard output outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - file which will be considered as entry point and run in PHP runtime
			* run-args - array of string arguments for execution (not for PHP runtime)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline30: Prolog Compilation
	param_description_pipeline30:
		"""
			Prolog compilation which compiles submitted files by user and provided extra files from exercise author. 
			Special Prolog wrapper is added to solution, this wrapper reads a query from stdin, gather its solutions and print them to stdout. 
			Compiler is `swipl` prolog interpreter implementation.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			
			Output variables:
			
			* binary-file - binary file outputted from compilation can be further processed in following pipelines
		"""
	param_name_pipeline31: "Python execution & evaluation [outfile]"
	param_description_pipeline31:
		"""
			Executes Python application and run judge on file outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - file which will be considered as entry point and run in Python runtime
			* run-args - array of string arguments for execution (not for Python runtime)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline32: "Python execution & evaluation [stdout]"
	param_description_pipeline32:
		"""
			Executes Python application and run judge on standard output outputted from execution.
			
			Input variables:
			
			* source-files - files submitted by user which will be executed
			* extra-files - files given by exercise author, will be added to execution
			* entry-point - file which will be considered as entry point and run in Python runtime
			* run-args - array of string arguments for execution (not for Python runtime)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
		"""
	param_name_pipeline33: Rust Compilation
	param_description_pipeline33:
		"""
			Rust compilation which compiles submitted files by user and provided extra files from exercise author. The entry point for `rustc` compiler has to be provided, either by exercise author or during submission of solution. Compiler is `rustc` and there are no default options.
			
			Input variables:
			
			* entry-point - Rust source code file which acts as a bootstrapper for the application
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			
			Output variables:
			
			* binary-file - binary file outputted from compilation can be further processed in following pipelines
		"""
	param_name_pipeline34: "Scala execution & evaluation [outfile]"
	param_description_pipeline34:
		"""
			Executes Scala application and run judge on file outputted from execution. Special `javarun.class` files is used as main entry point to the application. This class will try to find main class among submitted ones and execute it. Scala is executed using `scala` JDK runtime.
			
			Input variables:
			
			* runner-file - compiled class file which will serve as wrapper for execution
			* classes-dir - directory containing JVM class files which should be executed, main class is automatically found and executed
			* run-args - array of string arguments for execution (not for JVM)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* actual-output - file which is outputted by execution has to be somehow identified, this variable should contain its name
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
			* jar-files - optional jar files which should be used during compilation and execution
		"""
	param_name_pipeline35: "Scala execution & evaluation [stdout]"
	param_description_pipeline35:
		"""
			Executes Scala application and run judge on standard output outputted from execution. Special `javarun.class` file is used as main entry point to the application. This class will try to find main class among submitted ones and execute it. Scala is executed using `scala` JDK runtime.
			
			Input variables:
			
			* runner-file - compiled class file which will serve as wrapper for execution
			* classes-dir - directory containing JVM class files which should be executed, main class is automatically found and executed
			* run-args - array of string arguments for execution (not for JVM)
			* stdin-file - file which will be connected to standard input of execution
			* input-files - array of files given by author of exercise, can be used during execution
			* actual-inputs - corresponds with `input-files` and can contain array of new names for given input files
			* expected-output - file with expected results, will be used during judging
			* judge-type - textual representation of any supported judge if author wants to use built-in ones
			* judge-args - array of strings which will be used as additional arguments for judge
			* custom-judge - author of exercise can provide special file for judging either as binary or executable script
			* jar-files - optional jar files which should be used during compilation and execution
		"""
	param_name_pipeline36: Scalac compilation
	param_description_pipeline36:
		"""
			Scala compilation which compiles submitted files by user, provided extra files from exercise author and potentially JAR files provided by exercise author. Used compiler is `scalac` which compiles sources to class files. Pipeline also fetches execution runner and sends it to execution pipeline.
			
			Input variables:
			
			* source-files - files submitted by user which will be compiled
			* extra-files - files given by exercise author, will be added to compilation
			* extra-file-names - optionally extra files can be renamed during fetching, for which this variable is present
			* jar-files - optional jar files which should be used during compilation and execution
			* runner-file - mandatory runner class file which will be used as a wrapper executor
			
			Output variables:
			
			* classes-dir - compiled files with bytecode which can be further processed in following pipelines resides in this directory
			* jar-files - jar files passed from compilation to execution
			* runner-file - runner class file passed from compilation to execution
		"""

App\Model\Entity\PipelineConfig:
	pipelineConfig1:
		__construct:
			- "<{param_config_pipelineConfig1}>"
			- @demoAdmin

	pipelineConfig2:
		__construct:
			- "<{param_config_pipelineConfig2}>"
			- @demoAdmin

	pipelineConfig3:
		__construct:
			- "<{param_config_pipelineConfig3}>"
			- @demoAdmin

	pipelineConfig4:
		__construct:
			- "<{param_config_pipelineConfig4}>"
			- @demoAdmin

	pipelineConfig5:
		__construct:
			- "<{param_config_pipelineConfig5}>"
			- @demoAdmin

	pipelineConfig6:
		__construct:
			- "<{param_config_pipelineConfig6}>"
			- @demoAdmin

	pipelineConfig7:
		__construct:
			- "<{param_config_pipelineConfig7}>"
			- @demoAdmin

	pipelineConfig8:
		__construct:
			- "<{param_config_pipelineConfig8}>"
			- @demoAdmin

	pipelineConfig9:
		__construct:
			- "<{param_config_pipelineConfig9}>"
			- @demoAdmin

	pipelineConfig10:
		__construct:
			- "<{param_config_pipelineConfig10}>"
			- @demoAdmin

	pipelineConfig11:
		__construct:
			- "<{param_config_pipelineConfig11}>"
			- @demoAdmin

	pipelineConfig12:
		__construct:
			- "<{param_config_pipelineConfig12}>"
			- @demoAdmin

	pipelineConfig13:
		__construct:
			- "<{param_config_pipelineConfig13}>"
			- @demoAdmin

	pipelineConfig14:
		__construct:
			- "<{param_config_pipelineConfig14}>"
			- @demoAdmin

	pipelineConfig15:
		__construct:
			- "<{param_config_pipelineConfig15}>"
			- @demoAdmin

	pipelineConfig16:
		__construct:
			- "<{param_config_pipelineConfig16}>"
			- @demoAdmin

	pipelineConfig17:
		__construct:
			- "<{param_config_pipelineConfig17}>"
			- @demoAdmin

	pipelineConfig18:
		__construct:
			- "<{param_config_pipelineConfig18}>"
			- @demoAdmin

	pipelineConfig19:
		__construct:
			- "<{param_config_pipelineConfig19}>"
			- @demoAdmin

	pipelineConfig20:
		__construct:
			- "<{param_config_pipelineConfig20}>"
			- @demoAdmin

	pipelineConfig21:
		__construct:
			- "<{param_config_pipelineConfig21}>"
			- @demoAdmin

	pipelineConfig22:
		__construct:
			- "<{param_config_pipelineConfig22}>"
			- @demoAdmin

	pipelineConfig23:
		__construct:
			- "<{param_config_pipelineConfig23}>"
			- @demoAdmin

	pipelineConfig24:
		__construct:
			- "<{param_config_pipelineConfig24}>"
			- @demoAdmin

	pipelineConfig25:
		__construct:
			- "<{param_config_pipelineConfig25}>"
			- @demoAdmin

	pipelineConfig26:
		__construct:
			- "<{param_config_pipelineConfig26}>"
			- @demoAdmin

	pipelineConfig27:
		__construct:
			- "<{param_config_pipelineConfig27}>"
			- @demoAdmin

	pipelineConfig28:
		__construct:
			- "<{param_config_pipelineConfig28}>"
			- @demoAdmin

	pipelineConfig29:
		__construct:
			- "<{param_config_pipelineConfig29}>"
			- @demoAdmin

	pipelineConfig30:
		__construct:
			- "<{param_config_pipelineConfig30}>"
			- @demoAdmin

	pipelineConfig31:
		__construct:
			- "<{param_config_pipelineConfig31}>"
			- @demoAdmin

	pipelineConfig32:
		__construct:
			- "<{param_config_pipelineConfig32}>"
			- @demoAdmin

	pipelineConfig33:
		__construct:
			- "<{param_config_pipelineConfig33}>"
			- @demoAdmin

	pipelineConfig34:
		__construct:
			- "<{param_config_pipelineConfig34}>"
			- @demoAdmin

	pipelineConfig35:
		__construct:
			- "<{param_config_pipelineConfig35}>"
			- @demoAdmin

	pipelineConfig36:
		__construct:
			- "<{param_config_pipelineConfig36}>"
			- @demoAdmin

App\Model\Entity\Pipeline:
	pipeline1:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline1}>"
		description: "<{param_description_pipeline1}>"
		pipelineConfig: @pipelineConfig1
		runtimeEnvironments:
			- @bash

	pipeline2:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline2}>"
		description: "<{param_description_pipeline2}>"
		pipelineConfig: @pipelineConfig2
		runtimeEnvironments:
			- @bash

	pipeline3:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline3}>"
		description: "<{param_description_pipeline3}>"
		pipelineConfig: @pipelineConfig3
		runtimeEnvironments: []

	pipeline4:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline4}>"
		description: "<{param_description_pipeline4}>"
		pipelineConfig: @pipelineConfig4
		runtimeEnvironments:
			- @bash
			- @node-linux
			- @php-linux
			- @python3

	pipeline5:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline5}>"
		description: "<{param_description_pipeline5}>"
		pipelineConfig: @pipelineConfig5
		runtimeEnvironments:
			- @data-linux

	pipeline6:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline6}>"
		description: "<{param_description_pipeline6}>"
		pipelineConfig: @pipelineConfig6
		runtimeEnvironments:
			- @c-gcc-linux
			- @cxx-gcc-linux
			- @freepascal-linux
			- @go
			- @rust

	pipeline7:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline7}>"
		description: "<{param_description_pipeline7}>"
		pipelineConfig: @pipelineConfig7
		runtimeEnvironments:
			- @c-gcc-linux
			- @cxx-gcc-linux
			- @freepascal-linux
			- @go
			- @prolog
			- @rust

	pipeline8:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline8}>"
		description: "<{param_description_pipeline8}>"
		pipelineConfig: @pipelineConfig8
		runtimeEnvironments:
			- @freepascal-linux

	pipeline9:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline9}>"
		description: "<{param_description_pipeline9}>"
		pipelineConfig: @pipelineConfig9
		runtimeEnvironments:
			- @cxx-gcc-linux

	pipeline10:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline10}>"
		description: "<{param_description_pipeline10}>"
		pipelineConfig: @pipelineConfig10
		runtimeEnvironments:
			- @c-gcc-linux

	pipeline11:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline11}>"
		description: "<{param_description_pipeline11}>"
		pipelineConfig: @pipelineConfig11
		runtimeEnvironments:
			- @go

	pipeline12:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline12}>"
		description: "<{param_description_pipeline12}>"
		pipelineConfig: @pipelineConfig12
		runtimeEnvironments:
			- @groovy

	pipeline13:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline13}>"
		description: "<{param_description_pipeline13}>"
		pipelineConfig: @pipelineConfig13
		runtimeEnvironments:
			- @groovy

	pipeline14:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline14}>"
		description: "<{param_description_pipeline14}>"
		pipelineConfig: @pipelineConfig14
		runtimeEnvironments:
			- @groovy

	pipeline15:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline15}>"
		description: "<{param_description_pipeline15}>"
		pipelineConfig: @pipelineConfig15
		runtimeEnvironments:
			- @haskell

	pipeline16:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline16}>"
		description: "<{param_description_pipeline16}>"
		pipelineConfig: @pipelineConfig16
		runtimeEnvironments:
			- @haskell

	pipeline17:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline17}>"
		description: "<{param_description_pipeline17}>"
		pipelineConfig: @pipelineConfig17
		runtimeEnvironments:
			- @java

	pipeline18:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline18}>"
		description: "<{param_description_pipeline18}>"
		pipelineConfig: @pipelineConfig18
		runtimeEnvironments:
			- @java

	pipeline19:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline19}>"
		description: "<{param_description_pipeline19}>"
		pipelineConfig: @pipelineConfig19
		runtimeEnvironments:
			- @java

	pipeline20:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline20}>"
		description: "<{param_description_pipeline20}>"
		pipelineConfig: @pipelineConfig20
		runtimeEnvironments:
			- @kotlin

	pipeline21:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline21}>"
		description: "<{param_description_pipeline21}>"
		pipelineConfig: @pipelineConfig21
		runtimeEnvironments:
			- @kotlin

	pipeline22:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline22}>"
		description: "<{param_description_pipeline22}>"
		pipelineConfig: @pipelineConfig22
		runtimeEnvironments:
			- @kotlin

	pipeline23:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline23}>"
		description: "<{param_description_pipeline23}>"
		pipelineConfig: @pipelineConfig23
		runtimeEnvironments:
			- @mono

	pipeline24:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline24}>"
		description: "<{param_description_pipeline24}>"
		pipelineConfig: @pipelineConfig24
		runtimeEnvironments:
			- @mono

	pipeline25:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline25}>"
		description: "<{param_description_pipeline25}>"
		pipelineConfig: @pipelineConfig25
		runtimeEnvironments:
			- @mono

	pipeline26:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline26}>"
		description: "<{param_description_pipeline26}>"
		pipelineConfig: @pipelineConfig26
		runtimeEnvironments:
			- @node-linux

	pipeline27:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline27}>"
		description: "<{param_description_pipeline27}>"
		pipelineConfig: @pipelineConfig27
		runtimeEnvironments:
			- @node-linux

	pipeline28:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline28}>"
		description: "<{param_description_pipeline28}>"
		pipelineConfig: @pipelineConfig28
		runtimeEnvironments:
			- @php-linux

	pipeline29:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline29}>"
		description: "<{param_description_pipeline29}>"
		pipelineConfig: @pipelineConfig29
		runtimeEnvironments:
			- @php-linux

	pipeline30:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline30}>"
		description: "<{param_description_pipeline30}>"
		pipelineConfig: @pipelineConfig30
		runtimeEnvironments:
			- @prolog

	pipeline31:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline31}>"
		description: "<{param_description_pipeline31}>"
		pipelineConfig: @pipelineConfig31
		runtimeEnvironments:
			- @python3

	pipeline32:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline32}>"
		description: "<{param_description_pipeline32}>"
		pipelineConfig: @pipelineConfig32
		runtimeEnvironments:
			- @python3

	pipeline33:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline33}>"
		description: "<{param_description_pipeline33}>"
		pipelineConfig: @pipelineConfig33
		runtimeEnvironments:
			- @rust

	pipeline34:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline34}>"
		description: "<{param_description_pipeline34}>"
		pipelineConfig: @pipelineConfig34
		runtimeEnvironments:
			- @scala

	pipeline35:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline35}>"
		description: "<{param_description_pipeline35}>"
		pipelineConfig: @pipelineConfig35
		runtimeEnvironments:
			- @scala

	pipeline36:
		__construct:
			create:
				- null

		name: "<{param_name_pipeline36}>"
		description: "<{param_description_pipeline36}>"
		pipelineConfig: @pipelineConfig36
		runtimeEnvironments:
			- @scala

App\Model\Entity\BooleanPipelineParameter:
	pipeline1_isExecutionPipeline:
		__construct:
			- @pipeline1
			- isExecutionPipeline

		value: true

	pipeline1_producesFiles:
		__construct:
			- @pipeline1
			- producesFiles

		value: true

	pipeline1_hasEntryPoint:
		__construct:
			- @pipeline1
			- hasEntryPoint

		value: true

	pipeline2_isExecutionPipeline:
		__construct:
			- @pipeline2
			- isExecutionPipeline

		value: true

	pipeline2_producesStdout:
		__construct:
			- @pipeline2
			- producesStdout

		value: true

	pipeline2_hasEntryPoint:
		__construct:
			- @pipeline2
			- hasEntryPoint

		value: true

	pipeline3_isCompilationPipeline:
		__construct:
			- @pipeline3
			- isCompilationPipeline

		value: true

	pipeline4_isCompilationPipeline:
		__construct:
			- @pipeline4
			- isCompilationPipeline

		value: true

	pipeline5_isExecutionPipeline:
		__construct:
			- @pipeline5
			- isExecutionPipeline

		value: true

	pipeline5_judgeOnlyPipeline:
		__construct:
			- @pipeline5
			- judgeOnlyPipeline

		value: true

	pipeline6_isExecutionPipeline:
		__construct:
			- @pipeline6
			- isExecutionPipeline

		value: true

	pipeline6_producesFiles:
		__construct:
			- @pipeline6
			- producesFiles

		value: true

	pipeline7_isExecutionPipeline:
		__construct:
			- @pipeline7
			- isExecutionPipeline

		value: true

	pipeline7_producesStdout:
		__construct:
			- @pipeline7
			- producesStdout

		value: true

	pipeline8_isCompilationPipeline:
		__construct:
			- @pipeline8
			- isCompilationPipeline

		value: true

	pipeline9_isCompilationPipeline:
		__construct:
			- @pipeline9
			- isCompilationPipeline

		value: true

	pipeline10_isCompilationPipeline:
		__construct:
			- @pipeline10
			- isCompilationPipeline

		value: true

	pipeline11_isCompilationPipeline:
		__construct:
			- @pipeline11
			- isCompilationPipeline

		value: true

	pipeline12_isExecutionPipeline:
		__construct:
			- @pipeline12
			- isExecutionPipeline

		value: true

	pipeline12_producesFiles:
		__construct:
			- @pipeline12
			- producesFiles

		value: true

	pipeline13_isExecutionPipeline:
		__construct:
			- @pipeline13
			- isExecutionPipeline

		value: true

	pipeline13_producesStdout:
		__construct:
			- @pipeline13
			- producesStdout

		value: true

	pipeline14_hasExtraFiles:
		__construct:
			- @pipeline14
			- hasExtraFiles

		value: true

	pipeline14_isCompilationPipeline:
		__construct:
			- @pipeline14
			- isCompilationPipeline

		value: true

	pipeline15_hasExtraFiles:
		__construct:
			- @pipeline15
			- hasExtraFiles

		value: true

	pipeline15_isCompilationPipeline:
		__construct:
			- @pipeline15
			- isCompilationPipeline

		value: true

	pipeline16_isExecutionPipeline:
		__construct:
			- @pipeline16
			- isExecutionPipeline

		value: true

	pipeline16_producesStdout:
		__construct:
			- @pipeline16
			- producesStdout

		value: true

	pipeline16_hasEntryPoint:
		__construct:
			- @pipeline16
			- hasEntryPoint

		value: true

	pipeline17_isExecutionPipeline:
		__construct:
			- @pipeline17
			- isExecutionPipeline

		value: true

	pipeline17_producesFiles:
		__construct:
			- @pipeline17
			- producesFiles

		value: true

	pipeline18_isExecutionPipeline:
		__construct:
			- @pipeline18
			- isExecutionPipeline

		value: true

	pipeline18_producesStdout:
		__construct:
			- @pipeline18
			- producesStdout

		value: true

	pipeline19_isCompilationPipeline:
		__construct:
			- @pipeline19
			- isCompilationPipeline

		value: true

	pipeline20_isExecutionPipeline:
		__construct:
			- @pipeline20
			- isExecutionPipeline

		value: true

	pipeline20_producesFiles:
		__construct:
			- @pipeline20
			- producesFiles

		value: true

	pipeline21_isExecutionPipeline:
		__construct:
			- @pipeline21
			- isExecutionPipeline

		value: true

	pipeline21_producesStdout:
		__construct:
			- @pipeline21
			- producesStdout

		value: true

	pipeline22_hasExtraFiles:
		__construct:
			- @pipeline22
			- hasExtraFiles

		value: true

	pipeline22_isCompilationPipeline:
		__construct:
			- @pipeline22
			- isCompilationPipeline

		value: true

	pipeline23_isCompilationPipeline:
		__construct:
			- @pipeline23
			- isCompilationPipeline

		value: true

	pipeline24_isExecutionPipeline:
		__construct:
			- @pipeline24
			- isExecutionPipeline

		value: true

	pipeline24_producesFiles:
		__construct:
			- @pipeline24
			- producesFiles

		value: true

	pipeline25_isExecutionPipeline:
		__construct:
			- @pipeline25
			- isExecutionPipeline

		value: true

	pipeline25_producesStdout:
		__construct:
			- @pipeline25
			- producesStdout

		value: true

	pipeline26_hasEntryPoint:
		__construct:
			- @pipeline26
			- hasEntryPoint

		value: true

	pipeline26_isExecutionPipeline:
		__construct:
			- @pipeline26
			- isExecutionPipeline

		value: true

	pipeline26_producesFiles:
		__construct:
			- @pipeline26
			- producesFiles

		value: true

	pipeline27_hasEntryPoint:
		__construct:
			- @pipeline27
			- hasEntryPoint

		value: true

	pipeline27_isExecutionPipeline:
		__construct:
			- @pipeline27
			- isExecutionPipeline

		value: true

	pipeline27_producesStdout:
		__construct:
			- @pipeline27
			- producesStdout

		value: true

	pipeline28_isExecutionPipeline:
		__construct:
			- @pipeline28
			- isExecutionPipeline

		value: true

	pipeline28_producesFiles:
		__construct:
			- @pipeline28
			- producesFiles

		value: true

	pipeline28_hasEntryPoint:
		__construct:
			- @pipeline28
			- hasEntryPoint

		value: true

	pipeline29_isExecutionPipeline:
		__construct:
			- @pipeline29
			- isExecutionPipeline

		value: true

	pipeline29_producesStdout:
		__construct:
			- @pipeline29
			- producesStdout

		value: true

	pipeline29_hasEntryPoint:
		__construct:
			- @pipeline29
			- hasEntryPoint

		value: true

	pipeline30_isCompilationPipeline:
		__construct:
			- @pipeline30
			- isCompilationPipeline

		value: true

	pipeline30_hasExtraFiles:
		__construct:
			- @pipeline30
			- hasExtraFiles

		value: true

	pipeline31_isExecutionPipeline:
		__construct:
			- @pipeline31
			- isExecutionPipeline

		value: true

	pipeline31_producesFiles:
		__construct:
			- @pipeline31
			- producesFiles

		value: true

	pipeline31_hasEntryPoint:
		__construct:
			- @pipeline31
			- hasEntryPoint

		value: true

	pipeline32_isExecutionPipeline:
		__construct:
			- @pipeline32
			- isExecutionPipeline

		value: true

	pipeline32_producesStdout:
		__construct:
			- @pipeline32
			- producesStdout

		value: true

	pipeline32_hasEntryPoint:
		__construct:
			- @pipeline32
			- hasEntryPoint

		value: true

	pipeline33_isCompilationPipeline:
		__construct:
			- @pipeline33
			- isCompilationPipeline

		value: true

	pipeline33_hasEntryPoint:
		__construct:
			- @pipeline33
			- hasEntryPoint

		value: true

	pipeline34_isExecutionPipeline:
		__construct:
			- @pipeline34
			- isExecutionPipeline

		value: true

	pipeline34_producesFiles:
		__construct:
			- @pipeline34
			- producesFiles

		value: true

	pipeline35_isExecutionPipeline:
		__construct:
			- @pipeline35
			- isExecutionPipeline

		value: true

	pipeline35_producesStdout:
		__construct:
			- @pipeline35
			- producesStdout

		value: true

	pipeline36_hasExtraFiles:
		__construct:
			- @pipeline36
			- hasExtraFiles

		value: true

	pipeline36_isCompilationPipeline:
		__construct:
			- @pipeline36
			- isCompilationPipeline

		value: true

