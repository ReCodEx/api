<?php

namespace App\Helpers\Swagger;

/**
 * Builder class that handles annotation .php file creation.
 */
class TempAnnotationFileBuilder
{
    private $methodEntries;
    private string $content;
    private string $filename;

    public function __construct(
        string $filename
    ) {
        $this->content = "";
        $this->methodEntries = 0;
        $this->filename = $filename;
        $this->initFile();
    }

    /**
     * Initializes the file, adding the namespace and import statements.
     */
    private function initFile()
    {
        $this->content .= "<?php\n";
        $this->content .= "/// THIS FILE WAS AUTOGENERATED\n";
        $this->content .= "namespace App\V1Module\Presenters;\n";
        $this->content .= "use OpenApi\Annotations as OA;\n";
    }

    /**
     * Creates an annotation describing the swagger version and title used.
     * @param string $version The version of swagger.
     * @param string $title The title of the document.
     * @return string Returns the annotation.
     */
    private function createInfoAnnotation(string $version, string $title)
    {
        $head = "@OA\\Info";
        $body = new ParenthesesBuilder();
        $body->addKeyValue("version", $version);
        $body->addKeyValue("title", $title);
        return $head . $body->toString();
    }

    private function writeAnnotationLineWithComments(string $annotationLine)
    {
        $this->content .= "/**\n";
        $this->content .= "* {$annotationLine}\n";
        $this->content .= "*/\n";
    }

    /**
     * Creates a class that contains all the endpoint annotation methods.
     * Should only be called once as the first method.
     * @param string $className The name of the class.
     * @param string $version The version of swagger.
     * @param string $title The name of the swagger document.
     */
    public function startClass(string $className, string $version, string $title)
    {
        $this->writeAnnotationLineWithComments($this->createInfoAnnotation($version, $title));
        $this->content .= "class {$className} {\n";
    }

    /**
     * Ends the class and writes the contents to the disk.
     */
    public function endClass()
    {
        $this->content .= "}\n";
        $this->close();
    }

    /**
     * Adds an annotated method to the class.
     * @param string $methodName The name of the method. This does not have to be unique.
     * @param string $annotationLine The annotation line of the method.
     */
    public function addAnnotatedMethod(string $methodName, string $annotationLine)
    {
        $this->writeAnnotationLineWithComments($annotationLine);
        $this->content .= "public function {$methodName}{$this->methodEntries}() {}\n";
        $this->methodEntries++;
    }

    /**
     * Creates a file and adds the swagger content.
     */
    private function close()
    {
        $file = fopen($this->filename, "w");
        fwrite($file, $this->content);
        fflush($file);
        fclose($file);
    }
}
