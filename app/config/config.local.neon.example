parameters:
  api:
    address: "https://your.recodex.domain/api"

  webapp:
    address: "https://your.recodex.domain"

  async:
    pollingInterval: 10 # seconds (you may set this to larger values if inotify wakeups are allowed)
    # inotify can wake the async worker (immediately once an async opertion is issued)
    inotify: false # set to true only if your system (and PHP) supports inotify (not available on Windows, extension required on Linux)

  fileStorage: # where the local files are being stored
    local:
      root: %appDir%/../storage/local # this should be replaced with path to existing directory
    hash:
      root: %appDir%/../storage/hash # this should be replaced with path to existing directory

  submissions:
    locked: false  # if set to true, the API will not be accepting submissions (and it will be incidated in can-submit/permission hints)
    lockedReason:  # Localized message with reason displayed in UI, why the submissions are locked (ignored if locked == false)
      cs: "Odevzdávání řešení bylo zablokováno v konfiguraci aplikace."
      en: "Submitting new solutions is currently locked out in the application configuration."

  accessManager:
    issuer: "%webapp.address%"
    audience: "%webapp.address%"
    expiration: 604800  # 7 days in seconds
    invitationExpiration: 604800  # of an invitation token (7 days in seconds)
    verificationKey: "recodex-123"	# this should be a really secret string

  broker:
    address: "tcp://127.0.0.1:9658"
    auth:
      username: "user"  # these credentials must match credentials
      password: "pass"  # in broker configration file

  monitor:
    address: "wss://your.recodex.domain:443/ws"

  workerFiles:  # configuration for worker-files endpoint (direct access from worker to the core to upload/download files)
    enabled: true
    auth:  # username and password that must workers use in base HTTP auth
      username: "re"
      password: "codex"
    removalThreshold: "1 day"  # threshold for GC

  localRegistration:
    enabled: false  # set to true if you want to permit simple local registration

  externalAuthenticators:
    - name: "cas-auth-ext"
      jwtSecret: "secretStringSharedWithExternAuth"
      expiration: 60 # seconds passed since iat
      usedAlgorithm: HS256 # optional, HS256 is default

  emails:
    footerUrl: "%webapp.address%"
    from: "ReCodEx <noreply@your.recodex.domain>"
    defaultAdminTo: "Administrator <admin@example.com>"
    #debugMode: true  # in debug mode, no messages are sent via SMPT (you should also active archiving)
    #archivingDir: "%appDir%/../log/email-debug"  # a directory where copies of all emails sent are stored (in text files)
    
  exercises:
    # Restrictions
    testCountLimit: 100                    # maximal number of tests in one exercise
    supplementaryFileCountLimit: 200       # maximal number of test files 
    supplementaryFileSizeLimit: 268435456  # 256 MiB, max. total size of all test files 
    # Default values for newly created exercises
    solutionFilesLimitDefault: 10          # at most 10 files per solution (default, configurable per assignment)
    solutionSizeLimitDefault: 262144       # 256 KiB, max. size for all submitted files (default, configurable per assignment)

  removeInactiveUsers:
    # How long the user has to be inactive to warant the removal (null = never remove students, 1 month is minimum).
    # Please note that the length of the auth. token expiration should be considered (readonly tokens may expire after 1 year).
    threshold: "2 years"

  extensions:  # 3rd party tools which are linked from UI and can cooperate with ReCodEx
    - id: "ext-identifier"
      caption:  # to be displayed in UI; could be also single string (for all localizations)
        cs: "Český popisek"
        en: "English Caption"
      url: "https://extetrnal.domain.com/recodex/extension?token={token}&locale={locale}"  # '{token}' and '{locale}' are placeholders
      token:  # generated from tmp tokens passed via URL so the ext. tool can access ReCodEx API
        scopes: [ 'master', 'refresh' ]  # list of scopes for generated tokens (to be used by the extension)
        user: null  # user override (ID) for generating tokens (if null, the token will be generated for logged-in user)
      instances: []  # array of instances where this extension is enabled (empty array = all)
      user:  # filters applied to determine, whether logged-in user can access the extension
        roles: []  # array of enabled user roles (empty array = all)
        externalLogins: []  # list of external_login.auth_service IDs (at least one is required, empty array = nothing is required)


# The most important part - a database system connection
nettrine.dbal:
  connection:
    host: "localhost"
    user: "recodex"
    password: "someSecretPasswordYouNeedToSetYourself"
    dbname: "recodex"

# configure mailing module
mail:
  host: "your.smtp.forwarding.server"
  clientHost: "your.recodex.domain"
  port: 587
  username: "user"
  password: "pass"
  secure: "tls"
  context:
    ssl:
      verify_peer: false
      verify_peer_name: false
      allow_self_signed: true
