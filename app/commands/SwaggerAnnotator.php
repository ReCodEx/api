<?php

namespace App\Console;

use App\Helpers\MetaFormats\Attributes\Post;
use App\Helpers\MetaFormats\RequestParamData;
use App\Helpers\MetaFormats\Type;
use App\Helpers\MetaFormats\Validators\VArray;
use App\Helpers\MetaFormats\Validators\VMixed;
use App\Helpers\MetaFormats\Validators\VString;
use App\Helpers\Swagger\TempAnnotationFileBuilder;
use App\Helpers\Swagger\AnnotationHelper;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Exception;

/**
 * Command that creates a temporary file for swagger documentation generation.
 * The command uses the RouterFactory to find all endpoints.
 * The temporary file is consumed by the swagger:generate command.
 */
class SwaggerAnnotator extends Command
{
    protected static $defaultName = 'swagger:annotate';
    private static $autogeneratedAnnotationFilePath = 'app/V1Module/presenters/_autogenerated_annotations_temp.php';

    protected function configure(): void
    {
        $filePath = self::$autogeneratedAnnotationFilePath;
        $this->setName(self::$defaultName)->setDescription(
            "Extracts endpoint method annotations and puts them into a temporary file that can be used to generate"
                . " an OpenAPI documentation. The file is located at {$filePath}"
        );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $lines = ['$this->tests = ['];

        // get all routes of the api
        $routesMetadata = AnnotationHelper::getRoutesMetadata();
        foreach ($routesMetadata as $route) {
            // extract data from the existing annotations
            $data = AnnotationHelper::extractAttributeDataTesting(
                $route["class"],
                $route['method'],
            );

            /** @var RequestParamData[] */
            $attributeData = $data["data"];
            $httpMethod = $data["httpMethod"]->name;
            $testName = $route["class"] . "." . $route["method"];
            $action = lcfirst(substr($route["method"], strlen("action")));

            $lines[] = '    "' . $testName . '" => new Request(';
            $lines[] = '        "name",';
            $lines[] = '        method: "' . $httpMethod . '",';

            $paramsLine = '        params: ["action" => "' . $action . '",';
            $postLine = '        post: [';
            foreach ($attributeData as $requestParamData) {
                if ($requestParamData->type == Type::Path || $requestParamData->type == Type::Query) {
                    $paramsLine .= ' "' . $requestParamData->name . '" => "' . $requestParamData->validators[0]->getExampleValue() . '",';
                } elseif ($requestParamData->type == Type::Post) {
                    $validator = $requestParamData->validators[0];
                    if ($validator instanceof VString || $validator instanceof VMixed) {
                        $postLine .= ' "' . $requestParamData->name . '" => "' . $validator->getExampleValue() . '",';
                    } elseif ($validator instanceof VArray) {
                        $postLine .= ' "' . $requestParamData->name . '" => [],';
                    } else {
                        $postLine .= ' "' . $requestParamData->name . '" => ' . $validator->getExampleValue() . ',';
                    }
                }
            }
            $paramsLine .= "],";
            $postLine .= "],";

            $lines[] = $paramsLine;
            $lines[] = $postLine;
            $lines[] = '    ),';
        }

        $lines[] = '];';
        $tests = implode("\n", $lines);
        $output->writeln($tests);

        return Command::SUCCESS;
    }
}
